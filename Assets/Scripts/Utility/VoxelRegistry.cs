using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Sirenix.OdinInspector;
using Sirenix.Utilities;
using Sirenix.Utilities.Editor;
using UnityEngine;
using UnityEngine.Assertions;

namespace Aether
{
    
    [CreateAssetMenu(fileName = "Data", menuName = "Aether/Voxel Registry")]
    public class VoxelRegistry : ScriptableObject
    {
        // [ShowInInspector]
        // [SerializeField]
        // public static VoxelRegistry instance;
        //
        // [ShowInInspector] 
        // public static VoxelProto 
        //     Grass = instance?.Get("grass"),
        //     Dirt = instance?.Get("dirt"),
        //     Sand = instance?.Get("sand");
        
        public List<VoxelProto> Voxels;

        public Dictionary<string, int> mapStr2NumId;


        [Serializable]
        public class VoxelProto
        {
            public string Id;
            public float Hardness = 1.0f;
            
            // [InfoBox("AutoGenerated")]
            public UInt16 NumId;  // AutoGen
        }

        public VoxelProto Get(string strId) {
            return Voxels.Find(e => e.Id == strId);
        }

        public VoxelProto At(int numId) {
            return Voxels[numId];
        }
        
        [Button]
        public void RegenerateNumIds()
        {
            Voxels = Voxels.OrderBy(o => o.Id).ToList();
            Voxels.ForEach((v, i) =>
            {
                v.NumId = (UInt16)(i + 1);
            });
        }

        [Button]
        public void GenerateCodeReg()
        {
            StringBuilder sb = new();

            // sb.Append("public static VoxProto ");
            Voxels.ForEach(v => sb.Append(v.Id).Append(", "));
            sb.Append("; \n\n");
            
            Voxels.ForEach(v => sb.Append($"{v.Id} = reg.Get(\"{v.Id}\");\n"));

            UnityEngine.Debug.Log(sb.ToString());
        }
        
        [Button]
        public void GenerateAtlases()
        {
            
            GenerateAtlas("diff", "atlas_diff.png");
            GenerateAtlas("norm", "atlas_norm.png");
            GenerateAtlas("dram", "atlas_dram.png", isDRAM: true);
        }

        public void GenerateAtlas(string texType, string filepath, int resolution = 512, bool isDRAM = false)
        {
            UnityEngine.Debug.Log($"Generating Atlas {filepath} in resolution {resolution}");

            int N = Voxels.Count;
            Texture2D atlas = new Texture2D(N*resolution, resolution, TextureFormat.ARGB32, false);

            if (isDRAM)
            {
                Texture2D tmpOriginal = new(resolution, resolution);
                Texture2D tmpComposed = new(resolution, resolution);

                int idx = 0;
                foreach (var v in Voxels)
                {
                    if (TexLoadResize(v.Id, "disp", tmpOriginal, resolution, resolution))
                        TexCopyChannel(tmpOriginal, tmpComposed, 0, 0);
                    
                    if (TexLoadResize(v.Id, "rough", tmpOriginal, resolution, resolution))
                        TexCopyChannel(tmpOriginal, tmpComposed, 0, 1);
                    
                    if (TexLoadResize(v.Id, "ao", tmpOriginal, resolution, resolution))
                        TexCopyChannel(tmpOriginal, tmpComposed, 0, 2);
                    
                    if (TexLoadResize(v.Id, "metal", tmpOriginal, resolution, resolution))
                        TexCopyChannel(tmpOriginal, tmpComposed, 0, 3);
                    
                    TexResize(tmpComposed, atlas, resolution, resolution, idx*resolution);
                    idx++;
                }
            }
            else
            {
                int idx = 0;
                foreach (var v in Voxels)
                {
                    TexLoadResize(v.Id, texType, atlas, resolution, resolution, idx * resolution);
                    idx++;
                }
            }
            
            File.WriteAllBytes($"{Application.dataPath}/Art/Baked/{filepath}", atlas.EncodeToPNG());
        }
        
        private static bool TexLoadResize(string id, string texType, Texture2D dstTex, int dstWidth, int dstHeight, int dstX = 0)
        {
            string path = $"{Application.dataPath}/Art/Textures/Voxel/{id}/{texType}.png";
            if (!File.Exists(path))
                return false;

            Texture2D src = new Texture2D(0, 0);
            src.LoadImage(File.ReadAllBytes(path));
            TexResize(src, dstTex, dstWidth, dstHeight, dstX);
            return true;
        }
        
        private static void TexResize(Texture2D srcTex, Texture2D dstTex, int dstWidth, int dstHeight, int dstX)
        {
            srcTex.filterMode = FilterMode.Bilinear;  // before Graphics.Blit()
            RenderTexture tmp = RenderTexture.GetTemporary(dstWidth, dstHeight, 0, RenderTextureFormat.ARGB32, RenderTextureReadWrite.Default);
            //RenderTexture.active = tmp;
            Graphics.Blit(srcTex, tmp);
            //texture.Resize(newWidth, newHeight, texture.format, false);

            dstTex.ReadPixels(new Rect(0, 0, dstWidth, dstHeight), dstX, 0);
            dstTex.Apply();  // Upload to GPU?

            RenderTexture.ReleaseTemporary(tmp);
        }
        
        private static void TexCopyChannel(Texture2D srcTex, Texture2D dstTex, int srcChannel, int dstChannel)
        {
            Color32[] pSrc = srcTex.GetPixels32();
            Color32[] pDst = dstTex.GetPixels32();
            Assert.IsTrue(pSrc.Length == pDst.Length);

            for (int i = 0; i < pSrc.Length; ++i)
            {
                pDst[i][dstChannel] = pSrc[i][srcChannel];
            }
            dstTex.SetPixels32(pDst);
            dstTex.Apply();  // could move to outer for Optimizer Performance.
        }

    }
}